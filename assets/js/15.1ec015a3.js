(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{330:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_06-位运算符-二进制转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_06-位运算符-二进制转换"}},[s._v("#")]),s._v(" 06.位运算符&二进制转换")]),s._v(" "),t("h2",{attrs:{id:"位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[s._v("#")]),s._v(" 位运算符")]),s._v(" "),t("p",[s._v("处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("运算符")])]),s._v(" "),t("th"),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v('& ("and")')])]),s._v(" "),t("td",[s._v("按位与")]),s._v(" "),t("td",[s._v("两位全为1，结果为1，否则为0")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v('| ("or")')])]),s._v(" "),t("td",[s._v("按位或")]),s._v(" "),t("td",[s._v("两位有一个为1，结果为1，否则为0")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v('^ ("xor")')])]),s._v(" "),t("td",[s._v("按位异或")]),s._v(" "),t("td",[s._v("两位一个为0，一个为1，结果为1，否则为0")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v('~ ("not")')])]),s._v(" "),t("td",[s._v("按位取反")]),s._v(" "),t("td",[s._v("0为1，1为0")])])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TernaryOperatorDetail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算 (2 & 3)：\n         * 1. 因为计算机中都是以补码的形式计算的，所以先得到2的补码\n         * 2. 2为int型，4字节，所以原码为 00000000 00000000 00000000 00000010\n         * 3. 正数的原码和补码是一样的，所以2的补码为 00000000 00000000 00000000 00000010\n         * 4. 同理，3的原码和补码为 00000000 00000000 00000000 00000011\n         * 5. 按位运算 & (两位全为1，结果为1，否则为0)\n         *    00000000 00000000 00000000 00000010\n         *  & 00000000 00000000 00000000 00000011\n         * ————————————————————————————————————————\n         *    00000000 00000000 00000000 00000010\n         * 6. 运算后得到的是补码，将补码转为原码(因为第一位是0，所以是正数，则三码合一)\n         * 7. 转换为十进制的值为 2\n         * */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算 (~-2)\n         * 1. 先得到-2的原码 10000000 00000000 00000000 00000010\n         * 2. 计算-2的反码(原码符号位不变，其他位取反) 11111111 11111111 11111111 11111101\n         * 3. 计算-2的补码(它的反码+1) 11111111 11111111 11111111 11111110\n         * 4. 取反运算 ~ (0为1，1为0)\n         *  ~ 11111111 11111111 11111111 11111110\n         * ————————————————————————————————————————\n         *    00000000 00000000 00000000 00000001\n         * 5. 运算后得到的是补码，将补码转为原码(因为第一位是0，所以是正数，则三码合一)\n         * 6. 转换为十进制的值为 1\n         * */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算 (~2)\n         * 1. 先得到2的原码 00000000 00000000 00000000 00000010\n         * 2. 计算2的补码(三码合一) 00000000 00000000 00000000 00000010\n         * 3. 取反运算 ~ (0为1，1为0)\n         *  ~ 00000000 00000000 00000000 00000010\n         * ————————————————————————————————————————\n         *    11111111 11111111 11111111 11111101\n         * 4. 运算后得到的是补码，将补码转为原码(因为第一位是1，所以是负数)\n         * 5. 首先补码转反码(负数的反码等于负数的补码-1) 11111111 11111111 11111111 11111100\n         * 6. 反码转原码(符号位不变，其他位取反) 10000000 00000000 00000000 00000011\n         * 7. 转换为十进制的值为 -3\n         * */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[t("img",{attrs:{src:"images/Qrl2WXotl30OMA9tBryQPbOJ5cES0zwcjCSWkKUi2fI.gif",alt:"image"}})]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("运算符")])]),s._v(" "),t("th"),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v(">>")])]),s._v(" "),t("td",[s._v("算数右移")]),s._v(" "),t("td",[s._v("低位溢出，符号位不变，并用符号位补溢出的高位")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("<<")])]),s._v(" "),t("td",[s._v("算数左移")]),s._v(" "),t("td",[s._v("符号位不变，低位补0")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v(">>>")])]),s._v(" "),t("td",[s._v("无符号右移、逻辑右移")]),s._v(" "),t("td",[s._v("低位溢出，高位补0")])])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TernaryOperatorDetail")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算 (15 >> 2)\n         * 1. 先得到1的原码 00000000 00000000 00000000 00001111\n         * 2. 低位溢出，符号位不变，并用符号位补溢出的高位\n         * 3. 得到 00000000 00000000 00000000 00000011\n         * 4. 转换为十进制是3\n         * 5. 本质是 15 / 2 / 2 = 3\n         * */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算 (4 << 3)\n         * 1. 先得到4的原码 00000000 00000000 00000000 00000100\n         * 2. 符号位不变，低位补0\n         * 3. 得到 00000000 00000000 00000000 00100000\n         * 4. 转换为十进制是32\n         * 5. 本质是 4 * 2 * 2 * 2 = 32\n         * */")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[t("img",{attrs:{src:"images/Qrl2WXotl30OMA9tBryQPbOJ5cES0zwcjCSWkKUi2fI.gif",alt:"image"}})]),s._v(" "),t("p",[s._v("这些运算符按位模式处理。例如， 如果 n 是一个整数变量，而且用二进制表示的 n 从右边数第 4 位为 1，则"),t("code",[s._v("int fourthBitFromRight = (n & 0b1000) / 0b1000;")]),s._v("会返回 1，否则返回 0。利用 & 并结合使用适当的 2 的幂，可以把其他位掩掉， 而只保留其中的某一位。")]),s._v(" "),t("p",[s._v("& 和丨运算符应用在布尔值上时也会得到一个布尔值。这些运算符与 && 和 || 运算符很类似，不过 & 和丨运算符不采用“ 短路” 方式来求值， 也就是说，得到计算结果之前两个操作数都需要计算。")]),s._v(" "),t("p",[s._v(">>和<<运算符将位模式左移或右移。需要建立位模式来完成位掩码时， 这两个运算符会很方便："),t("code",[s._v("int fourthBitFromRight = (n & (1<< 3)) >> 3;")]),s._v("最后，>>>运算符会用 0 填充高位，这与>>不同，它会用符号位填充高位。"),t("strong",[s._v("不存在<<<运算符")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"二进制转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制转换"}},[s._v("#")]),s._v(" 二进制转换")]),s._v(" "),t("p",[s._v("对于整数，有四种表示方式：")]),s._v(" "),t("p",[s._v("二进制："),t("code",[s._v("0,1")]),s._v("，满 2 进 1，以 0b 或 0B 开头。")]),s._v(" "),t("p",[s._v("十进制："),t("code",[s._v("0-9")]),s._v("，满 10 进 1。")]),s._v(" "),t("p",[s._v("八进制："),t("code",[s._v("0-7")]),s._v("，满 8 进 1，以数字 0 开头表示。")]),s._v(" "),t("p",[s._v("十六进制："),t("code",[s._v("0-9,A(10)-F(15)")]),s._v("，满 16 进 1，以 0x 或 0X 开头表示，A-F不区分大小写。")]),s._v(" "),t("h3",{attrs:{id:"二进制转十进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制转十进制"}},[s._v("#")]),s._v(" 二进制转十进制")]),s._v(" "),t("p",[s._v("从最低位(右边)开始，将每个位上的数提取出来，乘以2的(位数-1)次方，然后求和。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/Ykqn0cL7W__YweB8rCwijHMwCIghg52Y8uSF8yOKn5c.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"八进制转十进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八进制转十进制"}},[s._v("#")]),s._v(" 八进制转十进制")]),s._v(" "),t("p",[s._v("从最低位(右边)开始，将每个位上的数提取出来，乘以8的(位数-1)次方，然后求和。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/1nSgWkwknBea7abmGdyo-qQec2PuTOh6Ki5EsTOORF0.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"十六进制转十进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十六进制转十进制"}},[s._v("#")]),s._v(" 十六进制转十进制")]),s._v(" "),t("p",[s._v("从最低位(右边)开始，将每个位上的数提取出来，乘以16的(位数-1)次方，然后求和。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/2rOsxDtYLKttXNkSfHY-hM7MH0eYHQYWMYIRCy4UIB8.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"十进制转二进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十进制转二进制"}},[s._v("#")]),s._v(" 十进制转二进制")]),s._v(" "),t("p",[s._v("将该数不断除以2，直到商为0，将每步得到的余数倒过来，就是对应的二进制。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/uFy9o0aj96rIiaqmDEeV-ytb3CAfsN3JYE9sDcCn8R0.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"十进制转八进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十进制转八进制"}},[s._v("#")]),s._v(" 十进制转八进制")]),s._v(" "),t("p",[s._v("将该数不断除以8，直到商为0，将每步得到的余数倒过来，就是对应的八进制。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/28sjR9mkldm64hsjvHma8167WWaZdLN3X3JQMrjQv-g.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"十进制转十六进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十进制转十六进制"}},[s._v("#")]),s._v(" 十进制转十六进制")]),s._v(" "),t("p",[s._v("将该数不断除以16，直到商为0，将每步得到的余数倒过来，就是对应的十六进制。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/KOL26fnbVSQ74GcVsSofa7_9b9QxNgKPtDIcDk97_9Y.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"二进制转八进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制转八进制"}},[s._v("#")]),s._v(" 二进制转八进制")]),s._v(" "),t("p",[s._v("从低位开始，将二进制数每三位一组，转成相对应的八进制数即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/Mns5sBlK6lNom_f9pXAYIKK3RO14Q5F9rnWl97n9Skw.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"二进制转十六进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制转十六进制"}},[s._v("#")]),s._v(" 二进制转十六进制")]),s._v(" "),t("p",[s._v("从低位开始，将二进制数每四位一组，转成对应的十六进制数即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/XJuOB1WlXYIZC2GHvs3O9Gii-rNqLUygO9Zf7DznCYQ.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"八进制转二进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八进制转二进制"}},[s._v("#")]),s._v(" 八进制转二进制")]),s._v(" "),t("p",[s._v("将八进制数每一位，转成对应的 三位的 二进制数即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/qauCxtbQdzzMocOSqjYiLFYL7PaUCiQI-RAsHVTSJ-c.png",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"十六进制转二进制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十六进制转二进制"}},[s._v("#")]),s._v(" 十六进制转二进制")]),s._v(" "),t("p",[s._v("将十六进制数每一位，转成对应的 四位的 二进制数即可。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/yE0Vjf71DBa6y4pHTtHhFYeelXPscu_3d5dOzgiHc1k.png",alt:"image"}})]),s._v(" "),t("h2",{attrs:{id:"原码、反码、补码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原码、反码、补码"}},[s._v("#")]),s._v(" 原码、反码、补码")]),s._v(" "),t("p",[s._v("原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。"),t("strong",[s._v("0表示正数，1表示负数")])]),s._v(" "),t("p",[s._v("比如如果是8位二进制：")]),s._v(" "),t("ul",[t("li",[s._v("0000 0001：表示1")]),s._v(" "),t("li",[s._v("1000 0001：表示-1")])]),s._v(" "),t("p",[s._v("反码的表示方法是：")]),s._v(" "),t("ul",[t("li",[s._v("正数的反码是其本身")]),s._v(" "),t("li",[t("strong",[s._v("负数的反码")]),s._v("是在其原码的基础上，"),t("strong",[s._v("符号位不变，其余各个位取反")])])]),s._v(" "),t("p",[s._v("补码的表示方法是：")]),s._v(" "),t("ul",[t("li",[s._v("正数的补码就是其本身")]),s._v(" "),t("li",[s._v("负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1")]),s._v(" "),t("li",[t("strong",[s._v("负数的补码")]),s._v("等于"),t("strong",[s._v("它的反码+1")]),s._v("，"),t("strong",[s._v("负数的反码")]),s._v("等于"),t("strong",[s._v("负数的补码-1")])])]),s._v(" "),t("ol",[t("li",[s._v("正数的原码、反码、补码都是一样的")]),s._v(" "),t("li",[s._v("0的反码、补码都是0")]),s._v(" "),t("li",[s._v("java没有无符号数，Java的数都是有符号的")]),s._v(" "),t("li",[s._v("计算机在运算的时候，都是以补码的方式来运算的")]),s._v(" "),t("li",[s._v("当看运算结果的时候，要看它的原码")])])])}),[],!1,null,null,null);t.default=r.exports}}]);
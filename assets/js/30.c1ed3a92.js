(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{345:function(s,a,t){"use strict";t.r(a);var e=t(7),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"class类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class类"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Class类")])]),s._v(" "),a("p",[s._v("Class也是类，继承与Object类，Class类对象不是new出来的，是在加载类的时候系统创建的，因此一个类的Class对象在内存中只有一份，因为类只加载一次。")]),s._v(" "),a("p",[s._v("通过Class对象可以获得该类的结构信息和一些其他信息。")]),s._v(" "),a("p",[s._v("Class类对象是放在堆中的，类的字节码二进制数据是放在方法区的。")]),s._v(" "),a("blockquote",[a("p",[s._v("在类第一次被加载时，会进入ClassLoader类中的loadClass方法创建Class对象。")])]),s._v(" "),a("p",[a("strong",[s._v("有Class类对象的类型有：")])]),s._v(" "),a("ul",[a("li",[s._v("外部类、成员内部类、静态内部类、局部内部类、匿名内部类")]),s._v(" "),a("li",[s._v("接口")]),s._v(" "),a("li",[s._v("数组")]),s._v(" "),a("li",[s._v("枚举")]),s._v(" "),a("li",[s._v("注解")]),s._v(" "),a("li",[s._v("基本数据类型")]),s._v(" "),a("li",[s._v("void")])]),s._v(" "),a("h3",{attrs:{id:"常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("常用方法")])]),s._v(" "),a("h6",{attrs:{id:"获取成员变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取成员变量"}},[s._v("#")]),s._v(" 获取成员变量")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("getFields()")]),s._v("：获取所有public修饰的成员变量，包括父类的。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getField(String name)")]),s._v("：获取指定名称的public修饰的成员变量，包括父类的。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredFields()")]),s._v("：获取所有的成员变量，不考虑修饰符，包括父类的。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredField(String name)")]),s._v("：获取指定名称的成员变量，包括父类的。")])])]),s._v(" "),a("h6",{attrs:{id:"获取构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取构造方法"}},[s._v("#")]),s._v(" 获取构造方法")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("getConstructor(Class...<?> parameterTypes)")]),s._v("：获得该类中与参数类型匹配的公有构造方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getConstructors()")]),s._v("：获得该类的所有公有构造方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredConstructor(Class...<?> parameterTypes)")]),s._v("：获得该类中与参数类型匹配的构造方法。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredConstructors()")]),s._v("：获得该类所有构造方法。")])])]),s._v(" "),a("h6",{attrs:{id:"获取成员方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取成员方法"}},[s._v("#")]),s._v(" 获取成员方法")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("getMethod(String name, Class...<?> parameterTypes)")]),s._v("：获得该类某个公有的方法，包括父类的。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getMethods()")]),s._v("：获得该类所有公有的方法，包括父类的。")])]),s._v(" "),a("li"),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredMethod(String name, Class...<?> parameterTypes)")]),s._v("：获得该类某个方法，包括父类的。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredMethods()")]),s._v("：获得该类所有方法，包括父类的。")])])]),s._v(" "),a("h6",{attrs:{id:"获取类、类对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类、类对象"}},[s._v("#")]),s._v(" 获取类、类对象")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("类名.class")]),s._v("：通过类名的属性class获取，多用于参数的传递。同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("对象.getClass()")]),s._v("：此方法在Object类中定义。多用于对象的获取字节码的方式。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("forName(String className)")]),s._v("：根据类名返回类的对象，多用于配置文件，将类名定义在配置文件中。读取文件，加载类。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getName()")]),s._v("：获得类的完整路径名字。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getClassLoader()")]),s._v("：获得类的加载器。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("newInstance()")]),s._v("：创建类的实例。调用的是类的无参构造。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getPackage()")]),s._v("：获得类的包。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getSimpleName()")]),s._v("：获得类的名字。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getSuperclass()")]),s._v("：获得当前类继承的父类的名字。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getInterfaces()")]),s._v("：获得当前类实现的类或是接口。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getClasses()")]),s._v("：返回一个数组，数组中包含该类中所有公共类和接口类的对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredClasses()")]),s._v("：返回一个数组，数组中包含该类中所有类和接口类的对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Cast")]),s._v("：把对象转换成代表类或是接口的对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("asSubclass(Class<U> clazz)")]),s._v("：把传递的类的对象转换成代表其子类的对象。")])])]),s._v(" "),a("h6",{attrs:{id:"获取类中注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取类中注解"}},[s._v("#")]),s._v(" 获取类中注解")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("getAnnotation(Class<A> annotationClass)")]),s._v("：返回该类中与参数类型匹配的公有注解对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getAnnotations()")]),s._v("：返回该类所有的公有注解对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredAnnotation(Class<A> annotationClass)")]),s._v("：返回该类中与参数类型匹配的所有注解对象。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getDeclaredAnnotations()")]),s._v("：返回该类所有的注解对象。")])])]),s._v(" "),a("h3",{attrs:{id:"获取class对象的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取class对象的方式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("获取Class对象的方式")])]),s._v(" "),a("p",[s._v("第一种：已知一个类的全类名，且该类在类路径下，可以通过Class类的静态方法"),a("code",[s._v("forName()")]),s._v(" 方法获取，如果获取不到，会抛出"),a("code",[s._v("ClassNotFoundException")]),s._v(" 异常。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" catCls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"run.arbor.Cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("blockquote",[a("p",[s._v("一般用于配置文件，读取类的全路径，加载类。")])]),s._v(" "),a("p",[s._v("第二种：若已知具体的类，可以通过累的class获取，该方式最安全可靠，程序性能最高。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" dogCls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("blockquote",[a("p",[s._v("一般用于参数传递，比如通过反射得到对应构造器对象。")])]),s._v(" "),a("p",[s._v("第三种：已知一个类的实例，调用该实例的"),a("code",[s._v("getClass()")]),s._v(" 方法来获取Class对象。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v(" cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" catCls2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取到的是运行类型")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("通过创建好的对象，获取Class对象")])]),s._v(" "),a("p",[s._v("第四种：通过ClassLoader的方式。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" catCls3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("第五种：获取基本数据类型的Class类对象，会自动转为包装类。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("第六种：基本数据类型对应的包装类，可以通过"),a("code",[s._v(".type")]),s._v(" 得到Class类对象")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{340:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"pattern类和matcher类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pattern类和matcher类"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Pattern类和Matcher类")])]),t._v(" "),a("p",[t._v("java.util.regex包主要包括三个类：")]),t._v(" "),a("ul",[a("li",[t._v("Pattern")]),t._v(" "),a("li",[t._v("Matcher")]),t._v(" "),a("li",[t._v("PatternSyntaxExcepiton")])]),t._v(" "),a("h2",{attrs:{id:"pattern类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pattern类"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Pattern类")])]),t._v(" "),a("p",[t._v("Pattern对象是一个正则表达式对象。Pattern类没有公共的构造方法。要创建一个Pattern对象，需要调用其公共静态方法。该方法接收一个正则表达式作为它的第一个参数。")]),t._v(" "),a("h3",{attrs:{id:"常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("static Pattern compile(String regex)")]),t._v("：将给定的正则表达式编译到模式中。")]),t._v(" "),a("li",[a("code",[t._v("Matcher matcher(String input)")]),t._v("：使用创建的规则匹配input字符串。")]),t._v(" "),a("li",[a("code",[t._v("static boolean matches(String regex, CharSequence input)")]),t._v("\n：使用传入的正则表达式整体匹配传入的字符串，如果满足返回true。")])]),t._v(" "),a("h2",{attrs:{id:"matcher类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matcher类"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Matcher类")])]),t._v(" "),a("p",[t._v("Matcher对象是对输入字符串进行解释和匹配的引擎。与Pattern类一样，Matcher也没有公共构造方法。需要调用Pattern对象的matcher方法来获得一个Matcher对象。")]),t._v(" "),a("h3",{attrs:{id:"常用方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用方法-2"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean find()")]),t._v("：查找与该正则匹配的字符串的下一个匹配内容。")])]),t._v(" "),a("blockquote",[a("p",[t._v("根据正则的规则，定位到满足条件的字符串，然后将"),a("strong",[t._v("开始索引")]),t._v("记录到Matcher对象的"),a("code",[t._v("int[] groups")]),t._v(" 数组中，再把"),a("strong",[t._v("结束索引 + 1")]),t._v("记录到到该数组中；将"),a("code",[t._v("oldLast")]),t._v(" 属性的值设置为结束索引+1的值，这个属性表示下次从这个索引的位置开始匹配。"),a("strong",[t._v("每次调用该方法，"),a("code",[t._v("groups")]),t._v(" 数组会被重新赋值。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果正则表达式中有分组，"),a("code",[t._v("groups")]),t._v(" 数组也会进行分组记录，数组的第一个索引是"),a("strong",[t._v("开始索引")]),t._v("，第二个索引是"),a("strong",[t._v("结束索引+1")]),t._v("，从第三个索引开始，是"),a("strong",[t._v("分组的索引值")]),t._v("，也是左闭右开(组的开始索引和组的结束索引+1)。")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("boolean find(int start)")]),t._v("：重置此匹配器，从指定索引处开始查找与该正则匹配的字符串的下一个匹配内容。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("String group(int group)")]),t._v("：返回在以前匹配操作期间捕获的字符串。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("根据"),a("code",[t._v("groups")]),t._v(" 数组中的索引位置值截取，左开右闭，不包含第二个索引值位置。根据"),a("code",[t._v("find()")]),t._v("方法的特性，该方法的参数如果传0，就是获取正则表达式截取到的所有内容；如果传大于0的值，就是获取分组的内容的值，分组的索引就是从0开始。")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("int start()")]),t._v("：返回以前匹配的初始索引。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("int start(int group)")]),t._v("：返回在以前的匹配操作期间，给定组所捕获的子序列的初始索引。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("int end()")]),t._v("：返回匹配的子字符串的结束索引+1。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("int end(int group)")]),t._v("：返回在以前的匹配操作期间，给定组所捕获的子序列的结束索引+1。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("boolean lookingAt()")]),t._v("：尝试将从区域开头的输入序列与该模式匹配。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("boolean matches()")]),t._v("：尝试将整个区域与模式匹配。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("String replaceAll(String replacement)")]),t._v("：替换模式与给定替换字符串相匹配的输入序列的每个子序列。")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" content "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sun公司发布了第二代Java平台（简称为Java2）的3个版本”"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则表达式：匹配四个数字，两个数字为一组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(\\\\d\\\\d)(\\\\d\\\\d)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),t._v(" pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pattern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Matcher")]),t._v(" matcher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"截取到的字符串："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"第一组："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"第二组："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" matcher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("输出结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/rAzrVlhaE7EqFfUSj6pkv5MdVD3cXeTNv-Xtr4FCXBY.png",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"patternsyntaxexception"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patternsyntaxexception"}},[t._v("#")]),t._v(" "),a("strong",[t._v("PatternSyntaxException")])]),t._v(" "),a("p",[t._v("PatternSyntaxException类是一个非强制异常类，它表示一个正则表达式模式中的语法错误。")])])}),[],!1,null,null,null);a.default=e.exports}}]);
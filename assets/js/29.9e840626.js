(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{344:function(s,t,a){"use strict";a.r(t);var n=a(7),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" "),t("strong",[s._v("反射")])]),s._v(" "),t("p",[s._v("JAVA反射机制是在运行状态中，对任意一个类，都能知道这个类的所有属性和方法；对任意一个对象，都能够调用它的任意方法和属性，这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。")]),s._v(" "),t("p",[s._v("反射(Reflect)是在运行时动态访问类与对象的技术，是JDK1.2版本后的高级特性，隶属于java.lang.reflect，大多数Java框架都基于反射实现参数配置、动态注入等特性。")]),s._v(" "),t("blockquote",[t("p",[s._v("加载完类之后，在队中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象包含了累的完整结构信息。")])]),s._v(" "),t("ul",[t("li",[s._v("可以在程序运行过程中，操作这些对象。")]),s._v(" "),t("li",[s._v("可以解耦，提高程序的可扩展性。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/image-20230920180953215.png",alt:"image-20230920180953215"}})]),s._v(" "),t("h3",{attrs:{id:"反射机制的相关类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的相关类"}},[s._v("#")]),s._v(" "),t("strong",[s._v("反射机制的相关类")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Class类")]),s._v("：代表类的实体，在运行的Java应用程序中表示类和接口，Class对象表示某个类加载后在堆中的对象")]),s._v(" "),t("li",[t("strong",[s._v("Field类")]),s._v("：代表类的成员变量（成员变量也称为类的属性）")]),s._v(" "),t("li",[t("strong",[s._v("Method类")]),s._v("：代表类的方法")]),s._v(" "),t("li",[t("strong",[s._v("Constructor类")]),s._v("：代表类的构造方法")])]),s._v(" "),t("p",[t("strong",[s._v("Field类、Method类和Constructor类")]),s._v("下面三个类对象都有"),t("code",[s._v("setAccessible()")]),s._v(" 方法，作用是启动和禁用访问安全检查的开关。")]),s._v(" "),t("ul",[t("li",[s._v("true表示反射的对象在使用时取消访问检查，提高反射效率。")]),s._v(" "),t("li",[s._v("false表示反射的对象执行访问检查。")])]),s._v(" "),t("h3",{attrs:{id:"反射的优点和缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射的优点和缺点"}},[s._v("#")]),s._v(" "),t("strong",[s._v("反射的优点和缺点")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("优点")]),s._v("：可以动态的创建和使用对象，使用灵活，没有反射机制，框架技术就失去底层支撑。")]),s._v(" "),t("li",[t("strong",[s._v("缺点")]),s._v("：使用反射基本是解释执行，对执行速度有影响。")])]),s._v(" "),t("p",[s._v("反射机制是Java实现动态语言的关键。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("静态加载")]),s._v("：编译时加载相关的类，如果没有则报错，依赖性太强。")]),s._v(" "),t("li",[t("strong",[s._v("动态加载")]),s._v("：运行是加载需要的类，如果运行时不用该类，即使不存在也不报错，降低了依赖性。")])]),s._v(" "),t("h3",{attrs:{id:"类被加载的时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类被加载的时机"}},[s._v("#")]),s._v(" "),t("strong",[s._v("类被加载的时机")])]),s._v(" "),t("ol",[t("li",[s._v("静态加载：创建对象(new)")]),s._v(" "),t("li",[s._v("静态加载：当子类被加载时，父类也会加载")]),s._v(" "),t("li",[s._v("静态加载：调用类中的静态成员")]),s._v(" "),t("li",[s._v("动态加载：反射")])]),s._v(" "),t("h4",{attrs:{id:"静态加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态加载"}},[s._v("#")]),s._v(" 静态加载")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" viod "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v(" cat "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时，如果没有Cat类，则会在编译的时候就报错")]),s._v("\n    cat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"动态加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态加载"}},[s._v("#")]),s._v(" 动态加载")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" cls "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Dog"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时，如果没有Dog类，编译时不会报错，代码走到这一行的时候会报错")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"类的加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[s._v("#")]),s._v(" "),t("strong",[s._v("类的加载")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qaomuu-blog.oss-cn-hangzhou.aliyuncs.com/image-20230920181055286.png",alt:"image-20230920181055286"}})]),s._v(" "),t("h4",{attrs:{id:"加载阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载阶段"}},[s._v("#")]),s._v(" 加载阶段")]),s._v(" "),t("p",[s._v("JVM在该阶段主要是将字节码从不同的数据源(可能是class文件，也可能是jar包、网络等)转化为二进制字节流加载到内存中，并生成一个该表该类的Class对象。")]),s._v(" "),t("h4",{attrs:{id:"连接阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接阶段"}},[s._v("#")]),s._v(" 连接阶段")]),s._v(" "),t("h5",{attrs:{id:"验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[s._v("#")]),s._v(" 验证")]),s._v(" "),t("p",[s._v("目的是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。包括但不限于：文件格式验证(是否以魔数0xcafebabe开头)、元数据验证、字节码验证和符号引用验证。")]),s._v(" "),t("p",[s._v("可以考虑使用"),t("code",[s._v("-Xverify:none")]),s._v(" 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间。")]),s._v(" "),t("h5",{attrs:{id:"准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[s._v("#")]),s._v(" 准备")]),s._v(" "),t("p",[s._v("JVM会在该阶段对静态变量分配内存并初始化(对应数据类型的初始值，如 0、0L、null、false)。这些变量所使用的内存都会在方法区中进行分配。")]),s._v(" "),t("blockquote",[t("p",[s._v("如果是"),t("code",[s._v("final")]),s._v(" 修饰的静态常量，会直接赋最终的值。")])]),s._v(" "),t("h5",{attrs:{id:"解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[s._v("#")]),s._v(" 解析")]),s._v(" "),t("p",[s._v("虚拟机将常量池内的符号引用替换为直接引用的过程。")]),s._v(" "),t("blockquote",[t("p",[s._v("比如：一个常量的引用是A类的一个对象，在这一步之前这个常量引用的是一个符号来指向A类，但不是对象；而到这一步之后，会将该常量引用具体的内存地址值。（符号是相对的，引用是绝对的）")])]),s._v(" "),t("h4",{attrs:{id:"初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),t("p",[s._v("到初始化阶段，才真正开始执行类中的Java代码，此阶段是执行"),t("code",[s._v("<clinit>()")]),s._v(" 方法的过程。该方法是由编译器按语句在源文件中出现的顺序，依次自动"),t("strong",[s._v("收集类中所有的静态变量的赋值动作和静态代码块中的语句")]),s._v("，并进行合并。")]),s._v(" "),t("p",[s._v("虚拟机会保证一个类的"),t("code",[s._v("<clinit>()")]),s._v(" 方法在多线程的环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么会只有一个线程去执行这个类的"),t("code",[s._v("<clinit>()")]),s._v(" 方法，其他线程都需要阻塞等待，直到活动线程执行"),t("code",[s._v("<clinit>()")]),s._v(" 方法完毕。")])])}),[],!1,null,null,null);t.default=r.exports}}]);